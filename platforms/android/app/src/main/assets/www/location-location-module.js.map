{"version":3,"sources":["webpack:///./src/app/location/location.module.ts","webpack:///./src/app/location/location.page.html","webpack:///./src/app/location/location.page.scss","webpack:///./src/app/location/location.page.ts"],"names":[],"mappings":"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","file":"location-location-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { LocationPage } from './location.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LocationPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [LocationPage]\r\n})\r\nexport class LocationPageModule {}\r\n","module.exports = \"\\r\\n<ion-header>\\r\\n  <ion-row>\\r\\n    <ion-col text-start padding-top>\\r\\n      <ion-title>Enter Your Track Mobile Data</ion-title>\\r\\n    </ion-col>\\r\\n    <ion-col text-end>\\r\\n      <ion-button (click)=\\\"loadMap()\\\" shape=\\\"round\\\" fill=\\\"outline\\\">\\r\\n        <ion-icon slot=\\\"start\\\" name=\\\"locate\\\"></ion-icon>\\r\\n        Where !s !t\\r\\n      </ion-button>\\r\\n    </ion-col>\\r\\n  </ion-row>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n\\r\\n  <ion-grid>\\r\\n  <ion-row>\\r\\n    <ion-col>\\r\\n        <ion-item>\\r\\n          <ion-label floating>MCC</ion-label>\\r\\n          <ion-input [(ngModel)]=\\\"mcc\\\" type=\\\"text\\\" value=\\\"\\\" ></ion-input>\\r\\n        </ion-item>\\r\\n    </ion-col>\\r\\n    <ion-col>\\r\\n     <ion-item>\\r\\n          <ion-label floating>MNC</ion-label>\\r\\n          <ion-input [(ngModel)]=\\\"mnc\\\" type=\\\"text\\\" value=\\\"\\\" ></ion-input>\\r\\n        </ion-item>\\r\\n    </ion-col>\\r\\n    <ion-col>\\r\\n<ion-item>\\r\\n          <ion-label floating>LAC</ion-label>\\r\\n          <ion-input [(ngModel)]=\\\"lac\\\" type=\\\"text\\\" value=\\\"\\\" ></ion-input>\\r\\n        </ion-item>    </ion-col>\\r\\n    <ion-col>\\r\\n      <ion-item>\\r\\n          <ion-label floating>CELL ID</ion-label>\\r\\n          <ion-input [(ngModel)]=\\\"cellId\\\" type=\\\"text\\\" value=\\\"\\\" ></ion-input>\\r\\n        </ion-item>\\r\\n    </ion-col>\\r\\n  </ion-row>\\r\\n   </ion-grid>\\r\\n\\r\\n\\r\\n<div #map class=\\\"map\\\"></div>\\r\\n    \\r\\n  <!--  \\r\\n  <div class=\\\"map-wrapper\\\">\\r\\n   <div #map id=\\\"map\\\"></div>\\r\\n  </div>\\r\\n  <div id=\\\"address\\\">\\r\\n    <span>{{address}}</span>\\r\\n  </div> </div>\\r\\n  -->\\r\\n\\r\\n\\r\\n</ion-content>\\r\\n\"","module.exports = \".map {\\n  background: grey;\\n  height: 100vh;\\n  width: 100vw; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9jYXRpb24vRTpcXGdlb0xvY2F0aW9uL3NyY1xcYXBwXFxsb2NhdGlvblxcbG9jYXRpb24ucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYixZQUFZLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9sb2NhdGlvbi9sb2NhdGlvbi5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLm1hcCB7XHJcbiAgYmFja2dyb3VuZDogZ3JleTtcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG4gIHdpZHRoOiAxMDB2dztcclxufSJdfQ== */\"","import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\r\nimport { NativeGeocoder,  NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\r\nimport { apiService } from '../apiService';\r\nimport { HttpClientModule,HttpClient } from '@angular/common/http';\r\n\r\ndeclare var google;\r\nconst H = window['H'];\r\n\r\n@Component({\r\n  selector: 'app-location',\r\n  templateUrl: './location.page.html',\r\n  styleUrls: ['./location.page.scss'],\r\n})\r\nexport class LocationPage {\r\n // using here maps \r\n\r\n  @ViewChild('map') mapContainer: ElementRef;\r\n\r\nmap: any;\r\n\r\n     mcc:number;\r\n     mnc:number;\r\n     lac:number;\r\n     cellId:number;\r\n\r\n     constructor( private http:HttpClient,geolocation: Geolocation) {\r\n          // get current location \r\n       geolocation.getCurrentPosition().then((location) => {\r\n\r\n        //console.log(location.coords);\r\n\r\n               // based on the current location forming the data  to the  json  \r\n         this.mapData({latitude:location.coords.latitude,longitude:location.coords.longitude})\r\n\r\n      }).catch((error) => {\r\n\r\n        console.log('Error getting location', error);\r\n\r\n      });\r\n     }\r\n     loadMap(){\r\n       /*  This function will get the data from APi call \r\n           Based on the mcc,mnc,cid,lac\r\n\r\n\r\n       */\r\n \r\n         this.http.post('http://localhost:3000/mobileCodes',\r\n\r\n                                 { mcc:this.mcc,\r\n                                   mnc:this.mnc,\r\n                                   lac:this.lac,\r\n                                   cid:this.cellId\r\n                                  }).subscribe(\r\n                                      data  => {\r\n                                    console.log(\"POST Request is successful \", data);\r\n\r\n                                   /*accuracy: 603\r\n                                     latitude: 17.454144\r\n                                     longitude: 78.541275*/\r\n                                      this.mapData(data)\r\n                                    },\r\n                                    error  => {\r\n\r\n                                    console.log(\"Error\", error);\r\n\r\n                                     });\r\n}\r\n\r\npublic  mapData(val){\r\n   let coordsData = {  lat: val.latitude ,lng:val.longitude }\r\n\r\n     const platform = new H.service.Platform({\r\n      app_id: 'Xs9OgBdukNyvJbPrJjS7',\r\n      app_code: 'rveTk4vWm3IgrJo4qdb_0g',\r\n      useCIT: true,\r\n      useHTTPS: true\r\n    });\r\n    const defaultLayers = platform.createDefaultLayers({\r\n      tileSize: 256 * Math.min(2, devicePixelRatio),\r\n      ppi: devicePixelRatio > 1 ? 320 : 72\r\n    });\r\n    const map = new H.Map(\r\n      this.mapContainer.nativeElement,\r\n      defaultLayers.normal.map,\r\n      {\r\n        center:  coordsData,\r\n        pixelRatio: Math.min(2, devicePixelRatio),\r\n        zoom: 10\r\n      }\r\n    );\r\n  \r\n   var marker = new H.map.Marker(coordsData);\r\n   map.addObject(marker);\r\n\r\n  const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));\r\n  const ui = H.ui.UI.createDefault(map, defaultLayers);\r\n\r\nreturn map;\r\n\r\n}\r\n\r\n\r\n\r\n  // google current location \r\n/*\r\n  @ViewChild('map') mapElement: ElementRef;\r\n  map: any;\r\n  address:string;\r\n  constructor(\r\n    private geolocation: Geolocation,\r\n    private nativeGeocoder: NativeGeocoder) {\r\n  }\r\n// location\r\n//https://www.freakyjolly.com/ionic-4-add-google-maps-geolocation-and-geocoder-in-ionic-4-native-application/\r\n\r\n  ngOnInit() {\r\n      this.loadMap();\r\n    }\r\n\r\n    loadMap() {\r\n      this.geolocation.getCurrentPosition().then((resp) => {\r\n       let latlong = new google.maps.LatLng(resp.coords.latitude, resp.coords.longitude)\r\n        let mapOptions = {\r\n          center:latlong  ,\r\n          zoom: 15,\r\n          mapTypeId: google.maps.MapTypeId.ROADMAP\r\n        };\r\n        let marker = new google.maps.Marker({\r\n          position: new google.maps.LatLng(latlong),\r\n          map: this.map\r\n        });\r\n\r\n\r\n        this.getAddressFromCoords(resp.coords.latitude, resp.coords.longitude);\r\n        this.map = new google.maps.Map(this.mapElement.nativeElement, mapOptions,marker);\r\n        let infowindow = new google.maps.InfoWindow();\r\n        this.map.addMarker(mapOptions).then((marker) => {\r\n                  marker.showInfoWindow();\r\n        });\r\n      }).catch((error) => {\r\n        console.log('Error getting location', error);\r\n      });\r\n    }\r\n\r\n    getAddressFromCoords(lattitude, longitude) {\r\n      console.log(\"lat\"+ lattitude +\" long \"+longitude);\r\n      let options: NativeGeocoderOptions = {\r\n        useLocale: true,\r\n        maxResults: 5\r\n      };\r\n\r\n      this.nativeGeocoder.reverseGeocode(lattitude, longitude, options)\r\n        .then((result: NativeGeocoderReverseResult[]) => {\r\n          this.address = \"\";\r\n          let responseAddress = [];\r\n          for (let [key, value] of Object.entries(result[0])) {\r\n            if(value.length>0)\r\n            responseAddress.push(value);\r\n\r\n          }\r\n          responseAddress.reverse();\r\n\r\n          for (let value of responseAddress) {\r\n            this.address += value+\", \";\r\n          }\r\n          this.address = this.address.slice(0, -2);\r\n        })\r\n        .catch((error: any) =>{\r\n          this.address = \"Address Not Available!\";\r\n        });\r\n\r\n    }\r\n*/\r\n}\r\n"],"sourceRoot":""}