{"version":3,"sources":["webpack:///./src/app/location/location.module.ts","webpack:///./src/app/location/location.page.html","webpack:///./src/app/location/location.page.scss","webpack:///./src/app/location/location.page.ts"],"names":[],"mappings":"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","file":"location-location-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LocationPage } from './location.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LocationPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [LocationPage]\n})\nexport class LocationPageModule {}\n","module.exports = \"\\n<ion-header>\\n  <ion-row>\\n    <ion-col text-start padding-top>\\n      <ion-title>Enter Your Track Mobile Data</ion-title>\\n    </ion-col>\\n    <ion-col text-end>\\n      <ion-button (click)=\\\"loadMap()\\\" shape=\\\"round\\\" fill=\\\"outline\\\">\\n        <ion-icon slot=\\\"start\\\" name=\\\"locate\\\"></ion-icon>\\n        Where !s !t\\n      </ion-button>\\n    </ion-col>\\n  </ion-row>\\n</ion-header>\\n<ion-content>\\n\\n  <ion-grid>\\n  <ion-row>\\n    <ion-col>\\n        <ion-item>\\n          <ion-label floating>MCC</ion-label>\\n          <ion-input [(ngModel)]=\\\"mcc\\\" type=\\\"text\\\" value=\\\"\\\" ></ion-input>\\n        </ion-item>\\n    </ion-col>\\n    <ion-col>\\n     <ion-item>\\n          <ion-label floating>MNC</ion-label>\\n          <ion-input [(ngModel)]=\\\"mnc\\\" type=\\\"text\\\" value=\\\"\\\" ></ion-input>\\n        </ion-item>\\n    </ion-col>\\n    <ion-col>\\n<ion-item>\\n          <ion-label floating>LAC</ion-label>\\n          <ion-input [(ngModel)]=\\\"lac\\\" type=\\\"text\\\" value=\\\"\\\" ></ion-input>\\n        </ion-item>    </ion-col>\\n    <ion-col>\\n      <ion-item>\\n          <ion-label floating>CELL ID</ion-label>\\n          <ion-input [(ngModel)]=\\\"cellId\\\" type=\\\"text\\\" value=\\\"\\\" ></ion-input>\\n        </ion-item>\\n    </ion-col>\\n  </ion-row>\\n   </ion-grid>\\n\\n\\n<div #map class=\\\"map\\\"></div>\\n    \\n  <!--  \\n  <div class=\\\"map-wrapper\\\">\\n   <div #map id=\\\"map\\\"></div>\\n  </div>\\n  <div id=\\\"address\\\">\\n    <span>{{address}}</span>\\n  </div> </div>\\n  -->\\n\\n\\n</ion-content>\\n\"","module.exports = \".map {\\n  background: grey;\\n  height: 100vh;\\n  width: 100vw; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhZGhha3Jpc2huYS9Eb2N1bWVudHMvTXlXb3Jrcy9PZmZpY2VMb2NhbEhvc3QvbXlPZmZpY2VXb3Jrcy9zdHVmZjIvZ2VvTG9jYXRpb24vc3JjL2FwcC9sb2NhdGlvbi9sb2NhdGlvbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsYUFBYTtFQUNiLFlBQVksRUFBQSIsImZpbGUiOiJzcmMvYXBwL2xvY2F0aW9uL2xvY2F0aW9uLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLm1hcCB7XG4gIGJhY2tncm91bmQ6IGdyZXk7XG4gIGhlaWdodDogMTAwdmg7XG4gIHdpZHRoOiAxMDB2dztcbn0iXX0= */\"","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { NativeGeocoder, NativeGeocoderReverseResult, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\nimport { apiService } from '../apiService';\nimport { HttpClientModule,HttpClient } from '@angular/common/http';\n\ndeclare var google;\nconst H = window['H'];\n\n@Component({\n  selector: 'app-location',\n  templateUrl: './location.page.html',\n  styleUrls: ['./location.page.scss'],\n})\nexport class LocationPage {\n // using here maps \n\n  @ViewChild('map') mapContainer: ElementRef;\n\nmap: any;\n\n     mcc:number;\n     mnc:number;\n     lac:number;\n     cellId:number;\n\n     constructor( private http:HttpClient,geolocation: Geolocation) {\n          // get current location \n       geolocation.getCurrentPosition().then((location) => {\n\n        //console.log(location.coords);\n\n               // based on the current location forming the data  to the  json  \n         this.mapData({latitude:location.coords.latitude,longitude:location.coords.longitude})\n\n      }).catch((error) => {\n\n        console.log('Error getting location', error);\n\n      });\n     }\n     loadMap(){\n       /*  This function will get the data from APi call \n           Based on the mcc,mnc,cid,lac\n\n\n       */\n \n         this.http.post('http://localhost:3000/mobileCodes',\n\n                                 { mcc:this.mcc,\n                                   mnc:this.mnc,\n                                   lac:this.lac,\n                                   cid:this.cellId\n                                  }).subscribe(\n                                      data  => {\n                                    console.log(\"POST Request is successful \", data);\n\n                                   /*accuracy: 603\n                                     latitude: 17.454144\n                                     longitude: 78.541275*/\n                                      this.mapData(data)\n                                    },\n                                    error  => {\n\n                                    console.log(\"Error\", error);\n\n                                     });\n}\n\npublic  mapData(val){\n   let coordsData = {  lat: val.latitude ,lng:val.longitude }\n\n     const platform = new H.service.Platform({\n      app_id: 'Xs9OgBdukNyvJbPrJjS7',\n      app_code: 'rveTk4vWm3IgrJo4qdb_0g',\n      useCIT: true,\n      useHTTPS: true\n    });\n    const defaultLayers = platform.createDefaultLayers({\n      tileSize: 256 * Math.min(2, devicePixelRatio),\n      ppi: devicePixelRatio > 1 ? 320 : 72\n    });\n    const map = new H.Map(\n      this.mapContainer.nativeElement,\n      defaultLayers.normal.map,\n      {\n        center:  coordsData,\n        pixelRatio: Math.min(2, devicePixelRatio),\n        zoom: 10\n      }\n    );\n  \n   var marker = new H.map.Marker(coordsData);\n   map.addObject(marker);\n\n  const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));\n  const ui = H.ui.UI.createDefault(map, defaultLayers);\n\nreturn map;\n\n}\n\n\n\n  // google current location \n/*\n  @ViewChild('map') mapElement: ElementRef;\n  map: any;\n  address:string;\n  constructor(\n    private geolocation: Geolocation,\n    private nativeGeocoder: NativeGeocoder) {\n  }\n// location\n//https://www.freakyjolly.com/ionic-4-add-google-maps-geolocation-and-geocoder-in-ionic-4-native-application/\n\n  ngOnInit() {\n      this.loadMap();\n    }\n\n    loadMap() {\n      this.geolocation.getCurrentPosition().then((resp) => {\n       let latlong = new google.maps.LatLng(resp.coords.latitude, resp.coords.longitude)\n        let mapOptions = {\n          center:latlong  ,\n          zoom: 15,\n          mapTypeId: google.maps.MapTypeId.ROADMAP\n        };\n        let marker = new google.maps.Marker({\n          position: new google.maps.LatLng(latlong),\n          map: this.map\n        });\n\n\n        this.getAddressFromCoords(resp.coords.latitude, resp.coords.longitude);\n        this.map = new google.maps.Map(this.mapElement.nativeElement, mapOptions,marker);\n        let infowindow = new google.maps.InfoWindow();\n        this.map.addMarker(mapOptions).then((marker) => {\n                  marker.showInfoWindow();\n        });\n      }).catch((error) => {\n        console.log('Error getting location', error);\n      });\n    }\n\n    getAddressFromCoords(lattitude, longitude) {\n      console.log(\"lat\"+ lattitude +\" long \"+longitude);\n      let options: NativeGeocoderOptions = {\n        useLocale: true,\n        maxResults: 5\n      };\n\n      this.nativeGeocoder.reverseGeocode(lattitude, longitude, options)\n        .then((result: NativeGeocoderReverseResult[]) => {\n          this.address = \"\";\n          let responseAddress = [];\n          for (let [key, value] of Object.entries(result[0])) {\n            if(value.length>0)\n            responseAddress.push(value);\n\n          }\n          responseAddress.reverse();\n\n          for (let value of responseAddress) {\n            this.address += value+\", \";\n          }\n          this.address = this.address.slice(0, -2);\n        })\n        .catch((error: any) =>{\n          this.address = \"Address Not Available!\";\n        });\n\n    }\n*/\n}\n"],"sourceRoot":""}